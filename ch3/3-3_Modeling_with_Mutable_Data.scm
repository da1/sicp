;;3.3 可変データでのモデル化
;;2章のデータ抽象
;;データ構造はデータオブジェクトを作り出す構成子と、合成データオブジェクトの部分にアクセスする選択子を使って規定する。
;データオブジェクトを修正する変更し(mutator)を含んだデータ抽象を設計する

;;銀行システムのモデル化では、口座の残高を変更する必要がある。
;;銀行口座を表現するデータ構造
;; (set-balance! <account> <new-value>)
;;指定された口座の残高を、支持された新しい金額に変更する
;;変更子が定義されているデータオブジェクトを可変データオブジェクト（mutable data object）という。

;;3.3.1 可変リスト構造
;; set-car! set-cdr!
;;破壊的操作なのでビックリマークつける

(define x '((a b) c d))
(define y '(e f))
x
y
(set-car! x y)
;; xのcarをyで置き換える
;; set-cdr!はset-car!とだいたい同じ。cdrを入れ替える

;; どこからも参照されないゴミができる。ゴミ集めをする必要がありますね。
;; ただし、後々実装する処理系には組み込まない。

;;共有と同一
;; 3.1.3では、「同じ」と「変化」の理論的論点を話した。
;;この論点は、実際には異なるデータオブジェクト間で個々の対が共有されたときに現れる。

(define x (list 'a 'b))
(define z1 (cons x x))
x
z1
(define z2 (cons (list 'a 'b) (list 'a 'b)))
;;一般にリストをcons, car およびcdrだけを使って作用させると共有していても検出できない
;;リスト構造に変更を認めると、共有が重要となる

(define (set-to-wow! x)
  (set-car! (car x) 'wow)
  x)
z1
(set-to-wow! z1)
z2
(set-to-wow! z2)

(eq? (car z1) (cdr z1))
(eq? (car z2) (cdr z2))

;; 代入のおかげでポインタがぐちゃぐちゃしちゃってもうやだね
;; という話

