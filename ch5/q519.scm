;; 問題5.19
;; ブレークポイント機能
;; (set-breakpoint <machine> <label> <n>)
;; 指定したラベルのあとn番目の命令の直前にブレークポイントを設置する

;; http://www.serendip.ws/archives/3380

(define (delete x xs)
  (if (null? list)
      '()
      (let ((front (car xs)))
	(if (equal? x front)
	    (cdr xs)
	    (cons front (delete x (cdr xs)))))))

(define (make-new-machine)
  (let ((pc (make-register 'pc))
	(flag (make-register 'flag))
	(stack (make-stack))
	(the-instruction-sequence '())
    	(instruction-count 0)
	(instruction-sequence '())
	(instruction-trace-flag #f)
        (the-instruction-sequence '())
	(label '())
	(breakpoints '())
	(count-from-label 0))
    (let ((the-ops
	   (list (list 'initialize-stack
		       (lambda () (stack 'initialize)))
		 (list 'print-stack-statistics
		       (lambda () (stack 'print-stack-statistics)))))
	  (register-table
	   (list (list 'pc pc) (list 'flag flag))))
      (define (allocate-register name)
	(if (assoc name register-table)
	    (error "Multiply defined register:" name)
	    (set! register-table
		  (cons (list name (make-register name))
			register-table)))
	'register-allocated)
      (define (lookup-register name)
	(let ((val (assoc name register-table)))
	  (if val
	      (cadr val)
	      (error "Unknown register:" name))))
      (define (execute)
	(let ((insts (get-contents pc)))
	  (if (null? insts)
	      'done
	      (begin
		((instruction-execution-proc (car insts)))
		(if (not (equal? (caaar insts) 'label))
		    (begin
		      (set! instruction-count (+ 1 instruction-count))
		      (set! count-from-label (+ 1 count-from-label)))
		    (begin
		      (set! count-from-label 0)
		      (set! label (cadr (caar insts)))))
		(print-trace (car insts) label)
		(if (member (cons label count-from-label) breakpoints)
		    (print "=== breakpoint ===")
		    (execute))))))
      (define (set-bpoint label n)
	(if (not (memq (cons label n) (map car breakpoints)))
	    (set! breakpoints (cons (cons label n) breakpoints))))
      (define (del-bpoint label n)
	(if (member (cons label n) breakpoints)
	    (set! breakpoints (delete (cons label n) breakpoints))
	    (error "Unknown breakpoint del-bpoint" (cons label n))))
      (define (del-all-bpoint)
	(set! breakpoints '()))
      (define (get-instruction-count)
	instruction-count)
      (define (initialize-instruction-count)
	(set! instruction-count 0))
      (define (set-instruction-trace flag)
	(set! instruction-trace-flag flag))
      (define (print-trace inst label)
	(if instruction-trace-flag
	    (begin
              (print "label: " label ", instruction: " (car inst)))
	      (newline)))
      (define (dispatch message)
	(cond ((eq? message 'start)
	       (set-contents! pc the-instruction-sequence)
	       (execute))
	      ((eq? message 'install-instruction-sequence)
	       (lambda (seq) (set! the-instruction-sequence seq)))
	      ((eq? message 'allocate-register) allocate-register)
	      ((eq? message 'get-register) lookup-register)
	      ((eq? message 'install-operations)
	       (lambda (ops) (set! the-ops (append the-ops ops))))
	      ((eq? message 'stack) stack)
	      ((eq? message 'operations) the-ops)
	      ((eq? message 'get-instruction-count)
	       (let ((cnt (get-instruction-count)))
		 (initialize-instruction-count)
		 cnt))
	      ((eq? message 'initialize-instruction-count)
	       (initialize-instruction-count))
	      ((eq? message 'trace-on) (set-instruction-trace #t))
	      ((eq? message 'trace-off) (set-instruction-trace #f))
              ((eq? message 'set-bpoint) set-bpoint)
              ((eq? message 'del-bpoint) del-bpoint)
	      ((eq? message 'del-all-bpoint) del-all-bpoint)
              ((eq? message 'proceed) execute)
	      (else (error "Unknown request -- MACHINE" message))))
      dispatch)))

(define (set-breakpoint machine label n)
  ((machine 'set-bpoint) label n)
  'set-breakpoint-done)

(define (cancel-breakpoint machine label n)
  ((machine 'del-bpoint) label n)
  'delete-breakpoint-done)

(define (cancel-all-breakpoint machine)
  ((machine 'del-all-bpoint))
  'delete-all-breakpoint-done)

(define (proceed-machine machine)
  ((machine 'proceed)))


(define gcd-machine
  (make-machine
   '(a b t)
   (list (list 'rem remainder) (list '= =))
   '(test-b
     (test (op =) (reg b) (const 0))
     (branch (label gcd-done))
     (assign t (op rem) (reg a) (reg b))
     (assign a (reg b))
     (assign b (reg t))
     (goto (label test-b))
     gcd-done)))

(gcd-machine 'trace-on)
(set-breakpoint gcd-machine 'test-b 4)
(set-breakpoint gcd-machine 'test-b 6)
(set-register-contents! gcd-machine 'a 206)
(set-register-contents! gcd-machine 'b 40)
(start gcd-machine)
(get-register-contents gcd-machine 'a)
(proceed-machine gcd-machine)
(get-register-contents gcd-machine 'a)
(proceed-machine gcd-machine)
(get-register-contents gcd-machine 'a)
(cancel-breakpoint gcd-machine 'test-b 6)
(proceed-machine gcd-machine)
(get-register-contents gcd-machine 'a)
(cancel-all-breakpoint gcd-machine)
(proceed-machine gcd-machine)
(get-register-contents gcd-machine 'a)
