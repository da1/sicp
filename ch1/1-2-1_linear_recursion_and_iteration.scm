;; 1.2 手続きとその生成するプロセス

;; 1.2.1 線形再帰と反復

;階乗を計算

;; 線形再帰
(define (factorial n)
  (if (= n 1)
      1
      (* n (factorial (- n 1)))))

;;置き換えモデルは，膨張と収縮のプロセスをたどる．
;; 膨張は，ぷろせすが遅延演算の列をつくるときに起きる．
;; このプロセスの実行には，必要な情報の数はnに線形して成長する．

;; 線形反復
(define (factorial n)
  (fact-iter 1 1 n))

(define (fact-iter product counter max-count)
  (if (> counter max-count)
      product
      (fact-iter
        (* counter product)
        (+ counter 1)
        max-count)))

;; 線形再帰と対称に伸び縮みしない

;; 反復と再帰を比べる場合，再帰的プロセス（process）と，再帰的手続き（procedure）を混同しないように注意する．

;; 手続きが再帰的とは構文の話
;; プロセスが再帰的とは，線形再帰であればプロセスがどう進化するかをいうので構文のことではない

;; プロセスと手続きが紛らわしのは，通常の言語の実装が，再帰手続きの実行で消費する記憶量が
;; プロセスは原理的に反復的であっても，手続き呼び出しの数と共に増加するように設計してあるからである．
;; 反復プロセスをこれらの言語で記述するには，whileなどのループ構造を使うしかない
;; schemeにはこの欠点がない．反復的プロセスは固定スペースで実行できる．
;; この性質の実装を末尾再帰的（tail recursive）という．


